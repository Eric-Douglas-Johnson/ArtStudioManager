@page "/classes/{classId:guid?}/edit-attendees"
@using Microsoft.AspNetCore.Components.QuickGrid;
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject IJSRuntime JsRuntime

<PageTitle>Edit Class Attendance</PageTitle>

<h3>Edit Class Attendance</h3>

<br />
<div class="parent-div">
    <div class="child-div" style="width:300px;">
        <label for="name">Members:</label>
        <InputSelect @bind-Value="selectedMemberId" @onchange="HandleSelectionChange">
            @foreach (var member in members!)
            {
                <option value="@member.MemberId">@member.Name</option>
            }
        </InputSelect>
    </div>
    <br />
    <button class="btn btn-primary" @onclick="@(() => AddMember(selectedMemberId!))">Add Member</button>
    <br /><br /><br />

    <div class="child-div" style="width:300px;">
        <label for="name">Non Member Name</label>
        <InputText id="name" @bind-Value="newAttendeeName" class="form-control"></InputText>
    </div>
    <br />
    <button class="btn btn-primary" @onclick="@(() => AddNonMember(newAttendeeName))">Add Non Member</button>
</div>
<br />
<br />

<QuickGrid Items="@queryableAttendanceRecord">
    <PropertyColumn Property="@(p => p.Artist!.Name)" Sortable="true" Title="Attendee Name" />
    <TemplateColumn Title="Actions">
        <button class="btn btn-primary" @onclick="@(() => RemoveAttendee(context.Artist!.Id))">Remove</button>
    </TemplateColumn>
</QuickGrid>

@code {
    [Parameter]
    public Guid ClassId { get; set; }

    private ArtClass? artClass;
    private IQueryable<AttendanceMark>? queryableAttendanceRecord;
    private ICollection<Member>? members;
    private string? selectedMemberId;
    private string newAttendeeName = "";

    protected override void OnInitialized()
    {
        artClass = new ArtClass(ClassId, new ArtClassTestDataLoader());
        queryableAttendanceRecord = artClass.Attendance.AttendanceRecord.AsQueryable<AttendanceMark>();

        members = ArtistService.GetMembers(new MembersTestCollectionLoader());
        selectedMemberId = members.First().MemberId;
    }

    private void HandleSelectionChange(ChangeEventArgs e)
    {
        selectedMemberId = e.Value!.ToString();
    }

    private void AddMember(string memberId)
    {
        //JsRuntime.InvokeVoidAsync("alert", memberId);
        var member = GetMember(memberId);

        if (!artClass!.Attendance!.ArtistIsAttending(member.Id))
        {
            if (member.GetType() != typeof(NullMember))
            {
                artClass!.Attendance!.AddAttendee(member);
                queryableAttendanceRecord = artClass.Attendance.AttendanceRecord.AsQueryable<AttendanceMark>();
            }
        }
    }

    private Member GetMember(string memberId)
    {
        if (string.IsNullOrEmpty(memberId)) { throw new ArgumentException("Member Id is null or empty"); }
        if (members == null || members.Count == 0) { throw new InvalidOperationException("Members collection is null or empty"); }

        foreach (var member in members)
        {
            if (member.MemberId!.Equals(memberId))
            {
                return member;
            }
        }

        return new NullMember();
    }

    private void AddNonMember(string attendeeName)
    {

    }

    private void RemoveAttendee(Guid artistId)
    {
        artClass!.Attendance!.RemoveAttendee(artistId);
        queryableAttendanceRecord = artClass.Attendance.AttendanceRecord.AsQueryable<AttendanceMark>();
    }

    private void Save()
    {
        artClass!.SaveAttendance();
    }
}