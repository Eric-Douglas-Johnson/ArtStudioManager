@page "/emails"
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject IJSRuntime JsRuntime
@using Microsoft.AspNetCore.Components.QuickGrid;

<PageTitle>Email</PageTitle>

<h3 style="color: purple;">Send Emails</h3>

@if (QueryableArtistChecks == null)
{
    <p style="color: purple; font-size: 25px;"><em>Loading Artists.....</em></p>
}
else
{
    <br />
    <label>Subject:</label>
    <br />
    <textarea id="subject" @bind="subject" rows="1" cols="65" />
    <br />
    <label>Message:</label>
    <br />
    <textarea id="emailbody" @bind="body" rows="7" cols="65" />
    <br />
    <br />
    <button class="btn btn-primary" @onclick="@(() => CheckAll())">Check All</button>
    <button style="margin-left: 10px" class="btn btn-primary" @onclick="@(() => UnCheckAll())">UnCheck All</button>
    <button style="margin-left: 200px" class="btn btn-primary" @onclick="@(() => Send())">Send Emails</button>
    <br />
    <br />
    <QuickGrid Items="QueryableArtistChecks" Pagination="pagState">
        <PropertyColumn Property="@(p => p.Artist!.Groups)" Title="Groups">
            <ColumnOptions>
                <input type="search" @bind="groupFilter" @bind:event="oninput" placeholder="Search Groups..."/>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(p => p.Artist!.GetArtistType())" Sortable="true" Title="Name" />
        <PropertyColumn Property="@(p => p.Artist!.Name)" Sortable="true" Title="Name" />
        <PropertyColumn Property="@(p => p.Artist!.Email)" Title="Email" />
        <TemplateColumn Title="Send Email">
            <input type="checkbox" @bind="context.SendEmail" />
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="@pagState"></Paginator>
    <br/>
}

@code {
    private List<Artist> artists = new();
    private List<ArtistCheck> artistChecks = new();
    private string subject = "";
    private string body = "";
    PaginationState pagState = new PaginationState { ItemsPerPage = 15 };
    private string? groupFilter;

    private IQueryable<ArtistCheck>? QueryableArtistChecks
    {
        get
        {
            var filteredArtists = artistChecks.AsQueryable<ArtistCheck>();

            if (!string.IsNullOrEmpty(groupFilter))
            {
                filteredArtists = filteredArtists.Where(x => x.Artist.Groups.Contains(groupFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            return filteredArtists;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ICollectionLoader<Artist> artistLoader = new ArtistsExcelLoader();
            
            await Task.Run(() => artistLoader.Load(artists));

            foreach (var artist in artists)
            {
                artistChecks.Add(new ArtistCheck(artist, false));
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", ex.Message);
        }    
    }

    private void CheckAll()
    {
        foreach (var artistCheck in artistChecks)
        {
            artistCheck.SendEmail = true;
        }
    }

    private void UnCheckAll()
    {
        foreach (var artistCheck in artistChecks)
        {
            artistCheck.SendEmail = false;
        }
    }

    private void Send()
    {
        var emailToList = new List<string>();

        if (QueryableArtistChecks == null) { throw new InvalidOperationException("No artist checks exist."); }

        foreach (var artistCheck in QueryableArtistChecks)
        {
            if (artistCheck.SendEmail && artistCheck.Artist.Email != null)
            {
                emailToList.Add(artistCheck.Artist.Email);
            }
        }

        Task.Run(() => EmailSender.SendEmails(
            "smtp.mail.yahoo.com", 587, "e_d_johnson2003", "ccqnygcnoqzcfsyl", emailToList, "e_d_johnson2003@yahoo.com", "Test", subject, body));
    }
}
